Parts of a function:
    1. function definition:--    function myfun1(){ }    
    2. function calling:--       myfun1();
    3. function arguments:--
    4. return value:--(It is optional)

various function version:
    1. function without arguments and without return:--
        function myfun1(){    // function definition
            console.log("this is function");
        }
        myfun1();

    2. function with arguments and without return:--
        function myfun2(a,b){    // function definition
            console.log("this is function "+a+" " +b);
        }
        myfun2("Hello", "hey");

    3. function with arguments and with return data:--
        function myfun3(a,b){    // function definition
            return a+b;
        }
        var x = myfun3(10,20);
        console.log(x);

    4. function without arguments and with return data:--
        function myfun4(){    // function definition
            return "hello";
        }
        var x = myfun4();
        console.log(x);

Default parameters:-
    function add(a,b=0){
        return a+b;
    }
    console.log(add(5)); // NAN

parameters rules:-
    a. js function definition do not specify data types for parameters
    b. js function do not perform type checking on the passed arguments
    c. js function do not check the number of arguments recieved


we can also create a function using constructor:
    var func = new Function("a" , "b" , "return a+b");
    console.log("function using constructor: "+ func(2,3));

function Expression:-- it means storing function definition inside a variable is called Expression. It is also known as Anonymous Function.
    var a = 10;
    var p = function(){
        console.log("This if function Expression");
        return "Hello Friends";
    };
    console.log(p());

self invoking function:-- this is also an anonymous function and its get called itself
    (function(){
        console.log("This is self invoking function");
    })();



Function-Hoisting:--
    sayHello(10,20);
    function sayHello(a,b){
        console.log(a+b);
    }


// hoisting of Expression function is not possible
    adds(2,3); // not possible 
    var adds= function(){
        console.log(a+b);
    }

Types of scope:
    1. Block scope:-- there is no block scope in es5 , but onwards es6 blockl scope is available (let and const)
        function scope1(){
            {
            var a = 10;
            console.log(a);
            }
            console.log(a);
        }
        console.log(a); // a is not defined
        scope1();

    2. function scope:-- 
        function scope2(){
            var a = 10;
            console.log(a);
        }
        scope2();
        console.log(a);

    3. global scope:--
    function parent1() {
        var v1 = 20;
        console.log("Parent scope");
        console.log(v1);
        function child1() {
            // var v1= 20;
            console.log("child scope");
            console.log(v1);
        }
        child1();
        console.log(v1);
    }
    parent1();


Let and const:
    1. Let: it is a block scope variable
    Note:--------  a variable that is create inside function without var is treated as global variable and have global scope 
    function check(){
        let data =20;
        console.log(data);
    }
    check(); 
    console.log(data); // not accessible




REFERNCE OF name() FUNCTION IS ALSO STORED IN sums 
SO WE CALL THE FUNCTION USING sums() AS WELL AS name()
    function name(a,b) {
        return a+b;
    }
    var sums = name;
    console.log(sums(10,5));
    console.log(name(10,5));


Passing function to a function:--
    function avg(a,b,sum){
        return sum(a,b)/2;
    }
    function sum(a,b){
        return a+b;
    }
    var result = avg(5,5,sum);
    console.log("Result is : "+ result);